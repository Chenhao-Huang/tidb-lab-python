from demo_connection import get_connection


def setup_tables(cursor):
    """Create test tables for AUTO_RANDOM demonstration"""
    # Drop tables if they exist
    cursor.execute("DROP TABLE IF EXISTS auto_random_demo")
    cursor.execute("DROP TABLE IF EXISTS auto_increment_demo")

    # Create a table with AUTO_RANDOM
    cursor.execute("""
        CREATE TABLE auto_random_demo (
            id BIGINT PRIMARY KEY AUTO_RANDOM,
            name VARCHAR(255)
        )
    """)
 
    # Create a similar table with AUTO_INCREMENT for comparison
    cursor.execute("""
        CREATE TABLE auto_increment_demo (
            id BIGINT PRIMARY KEY AUTO_INCREMENT,
            name VARCHAR(255)
        )
    """)

    print("Tables created successfully.")


def show_table_definition(cursor, table_name):
    """Show the CREATE TABLE statement to verify AUTO_RANDOM settings"""
    cursor.execute(f"SHOW CREATE TABLE {table_name}")
    result = cursor.fetchone()
    print(f"\nTable definition for {table_name}:")
    print(result[1])  # The second column contains the CREATE TABLE statement


def insert_data(cursor, count=10):
    """Insert data into both tables and compare the IDs"""
    # Insert rows into AUTO_RANDOM table
    values = [(f"Auto-random value {i}",) for i in range(count)]
    cursor.executemany(
        "INSERT INTO auto_random_demo (name) VALUES (%s)",
        values
    )
    print(f"\nInserted {count} rows into AUTO_RANDOM table")

    # Insert rows into AUTO_INCREMENT table
    values = [(f"Auto-increment value {i}",) for i in range(count)]
    cursor.executemany(
        "INSERT INTO auto_increment_demo (name) VALUES (%s)",
        values
    )
    print(f"Inserted {count} rows into AUTO_INCREMENT table")


def compare_ids(cursor):
    """Compare the IDs generated by AUTO_RANDOM and AUTO_INCREMENT"""
    # Get AUTO_RANDOM IDs
    cursor.execute("SELECT id, name FROM auto_random_demo ORDER BY name LIMIT 10")
    auto_random_rows = cursor.fetchall()
    
    # Get AUTO_INCREMENT IDs
    cursor.execute("SELECT id, name FROM auto_increment_demo ORDER BY name LIMIT 10")
    auto_increment_rows = cursor.fetchall()
    
    print("\n=== ID Comparison: AUTO_RANDOM vs AUTO_INCREMENT ===")
    print("\nAUTO_RANDOM IDs (distributed to avoid hotspots):")
    for id_val, name in auto_random_rows:
        print(f"  {name}: {id_val}")
    
    print("\nAUTO_INCREMENT IDs (sequential, can cause hotspots):")
    for id_val, name in auto_increment_rows:
        print(f"  {name}: {id_val}")


def cleanup(cursor):
    """Drop the test tables"""
    cursor.execute("DROP TABLE IF EXISTS auto_random_demo")
    cursor.execute("DROP TABLE IF EXISTS auto_increment_demo")
    print("\nCleanup complete. Test tables dropped.")


def main():
    """Main function to run the AUTO_RANDOM demonstration"""
    with get_connection() as connection:
        print(f"Connected to TiDB: {connection.user}@{connection.server_host}:{connection.server_port}")

        with connection.cursor() as cursor:
            # Create tables
            setup_tables(cursor)
            connection.commit()

            # Show table definitions
            show_table_definition(cursor, "auto_increment_demo")
            show_table_definition(cursor, "auto_random_demo")

            # Insert data and get IDs
            insert_data(cursor, count=10)
            connection.commit()

            # Compare the IDs
            compare_ids(cursor)

            # Cleanup
            cleanup(cursor)


if __name__ == "__main__":
    main()
